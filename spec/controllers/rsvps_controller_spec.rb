require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RsvpsController, type: :controller do

  let(:valid_attributes) {
    { name: "First Last", email: "test@test.com", phone: "01915555555",
      events: "Daytime and Evening", guests: "0" }
  }

  let(:invalid_attributes) {
    { email: "test@test.com", phone: "01915555555",
      events: "Daytime and Evening", guests: "0" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RsvpsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do

    before(:each) do
      session[:logged_in] = true
    end

    it "redirects to the login page if not logged in" do
      session[:logged_in] = nil
      get :index
      expect(response).to redirect_to '/login'
    end

    it "assigns all rsvps as @rsvps" do
      rsvp = Rsvp.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:rsvps)).to eq([rsvp])
    end

  end

  describe "POST #create" do

    context "with valid params" do

      it "creates a new Rsvp" do
        expect {
          post :create, {:rsvp => valid_attributes}
        }.to change(Rsvp, :count).by(1)
      end

      it "flashes a success message" do
        post :create, {:rsvp => valid_attributes}
        expect(flash[:success]).to be_present
      end

      it "redirects to the home page" do
        post :create, {:rsvp => valid_attributes}
        expect(response).to redirect_to("/")
      end

    end

    context "with invalid params" do

      it "flashes a warning message" do
        post :create, {:rsvp => invalid_attributes}
        expect(flash[:warning]).to be_present
      end

      it "redirects to the home page" do
        post :create, {:rsvp => invalid_attributes}
        expect(response).to redirect_to("/")
      end

    end

  end

end
